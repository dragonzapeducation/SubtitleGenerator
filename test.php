<?php
use Dragonzap\SubtitleGenerator\Exceptions\SubtitleGenerationFailedException;
use Dragonzap\SubtitleGenerator\SubtitleGeneratingService;

require 'vendor/autoload.php';

$subtitleGeneratingService = new SubtitleGeneratingService([
    'project_id' => 'GOOGLEPROJECTID',
    'credentials' => __DIR__ . '/speech-to-text-credentials.json',
    'bucket' => 'bucketname',
    'audio_file_tmp_directory' => 'audio-files',
]);

$operation_id = $subtitleGeneratingService->beginGeneratingSubtitles('input.mp4');

echo "Operation ID: " . $operation_id . "\n";

// Check the status of the operation
try {
    while (1) {
        $response = $subtitleGeneratingService->checkSubtitleGenerationOperation($operation_id);
        if ($response['status'] == 'success') {
            echo "Subtitles generated successfully!\n";
            echo "Subtitles to be stored in WEBVTT file: \n" . $response['subtitles'] . "\n";
            break;
        } else {
            echo "Generating subtitles...\n";
        }
        sleep(5);
    }
} catch (SubtitleGenerationFailedException $ex) {
    echo "Subtitle generation failed: " . $ex->getMessage() . "\n";
} catch (Exception $e) {
    echo "Error: " . $e->getMessage() . "\n";
}


// SEE USAGE BELOW FFMPEG WILL RUN TO EXTRACT THE AUDIO FILE
// THEN GOOGLE CLOUD WILL GENERATE THE SPEECH TO TEXT 
// SUBTITLES WILL THEN BE GENERATED BY THE DRAGONZAP SUBTITLE GENERATOR PACKAGE BASED ON THE
// RESPONSE FROM GOOGLE CLOUD
// AFTER RUNNING THE LIBRARY THE $response['subtitles'] CAN BE WRITTEN TO A VTT FILE
// AND CAN THEN BE LOADED INTO A VIDEO PLAYER SUCH AS VIDEO.JS OR DEFAULT HTML <VIDEO> TAG

// daniel@daniel-VirtualBox:~/SubtitleGenerator$ php ./test.php
// ffmpeg version 4.4.2-0ubuntu0.22.04.1 Copyright (c) 2000-2021 the FFmpeg developers
//   built with gcc 11 (Ubuntu 11.2.0-19ubuntu1)
//   configuration: --prefix=/usr --extra-version=0ubuntu0.22.04.1 --toolchain=hardened --libdir=/usr/lib/x86_64-linux-gnu --incdir=/usr/include/x86_64-linux-gnu --arch=amd64 --enable-gpl --disable-stripping --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libdav1d --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librabbitmq --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzimg --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enable-sdl2 --enable-pocketsphinx --enable-librsvg --enable-libmfx --enable-libdc1394 --enable-libdrm --enable-libiec61883 --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared
//   libavutil      56. 70.100 / 56. 70.100
//   libavcodec     58.134.100 / 58.134.100
//   libavformat    58. 76.100 / 58. 76.100
//   libavdevice    58. 13.100 / 58. 13.100
//   libavfilter     7.110.100 /  7.110.100
//   libswscale      5.  9.100 /  5.  9.100
//   libswresample   3.  9.100 /  3.  9.100
//   libpostproc    55.  9.100 / 55.  9.100
// Input #0, mov,mp4,m4a,3gp,3g2,mj2, from 'input.mp4':
//   Metadata:
//     major_brand     : isom
//     minor_version   : 512
//     compatible_brands: isomiso2avc1mp41
//     encoder         : Lavf58.29.100
//   Duration: 00:04:28.59, start: 0.000000, bitrate: 2252 kb/s
//   Stream #0:0(und): Video: h264 (Constrained Baseline) (avc1 / 0x31637661), yuv420p, 1920x1080 [SAR 1:1 DAR 16:9], 2120 kb/s, 25 fps, 25 tbr, 12800 tbn, 50 tbc (default)
//     Metadata:
//       handler_name    : VideoHandler
//       vendor_id       : [0][0][0][0]
//   Stream #0:1(und): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 128 kb/s (default)
//     Metadata:
//       handler_name    : SoundHandler
//       vendor_id       : [0][0][0][0]
// Stream mapping:
//   Stream #0:1 -> #0:0 (aac (native) -> pcm_s16le (native))
// Press [q] to stop, [?] for help
// Output #0, wav, to '/tmp/audio_d7hXIa.wav':
//   Metadata:
//     major_brand     : isom
//     minor_version   : 512
//     compatible_brands: isomiso2avc1mp41
//     ISFT            : Lavf58.76.100
//   Stream #0:0(und): Audio: pcm_s16le ([1][0][0][0] / 0x0001), 44100 Hz, mono, s16, 705 kb/s (default)
//     Metadata:
//       handler_name    : SoundHandler
//       vendor_id       : [0][0][0][0]
//       encoder         : Lavc58.134.100 pcm_s16le
// size=   23132kB time=00:04:28.56 bitrate= 705.6kbits/s speed= 917x    
// video:0kB audio:23132kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.000329%
// Operation ID: 9213499025525298033
// Generating subtitles...
// Generating subtitles...
// Generating subtitles...
// Generating subtitles...
// Generating subtitles...
// Generating subtitles...
// Generating subtitles...
// Generating subtitles...
// Generating subtitles...
// Generating subtitles...
// Subtitles generated successfully!
// Subtitles to be stored in WEBVTT file: 


// WEBVTT

// 1
// 00:00:00.000 --> 00:00:04.500
// in this course we're going to create a compiled ethical compile the C programming language

// 2
// 00:00:04.500 --> 00:00:09.200
// are you ready to prove that you're capable of creating such a project I am

// 3
// 00:00:09.200 --> 00:00:14.000
// down the copy your teacher I will be here throughout the entire duration of this

// 4
// 00:00:14.000 --> 00:00:20.000
// course to help you trade your very own C compiler your C compiler will compile

// 5
// 00:00:20.000 --> 00:00:26.800
// a subset of the C programming language will be supported while Loops to our Loops

// 6
// 00:00:26.800 --> 00:00:35.000
// break continue switch if l c o c statements a supported see structures see unions

// 7
// 00:00:35.000 --> 00:00:39.600
// the Mac Pro system functions function calls

// 8
// 00:00:40.500 --> 00:00:48.900
// return the list goes off upon completing this course you'll see compiler will compile the

// 9
// 00:00:48.900 --> 00:00:54.800
// majority of the C programming language from OC Falls at it and it will compile

// 10
// 00:00:54.800 --> 00:01:00.500
// it without any problems at all but you already at the C programming language can

// 11
// 00:01:00.500 --> 00:01:05.200
// be compiled without compila by the end of this car show where the Rossi Files

// 12
// 00:01:05.200 --> 00:01:11.000
// at your C compiler and watch them get compiled into a beautiful excludable binary that

// 13
// 00:01:11.000 --> 00:01:17.200
// you can run the course is split into multiple modules in module one you will

// 14
// 00:01:17.200 --> 00:01:22.700
// learn how to create a Lexa on a positive Alexa will take your C source

// 15
// 00:01:22.700 --> 00:01:27.700
// file input and it will create token out but we don't have all these tokens

// 16
// 00:01:27.700 --> 00:01:32.500
// such as a keyword token and operate a tow can identify a token and we

// 17
// 00:01:32.500 --> 00:01:37.700
// can pass those into a positive I want to goes into the positive outcomes a

// 18
// 00:01:37.700 --> 00:01:40.400.00000000001
// tree I'll let you will tree lobster

// 19
// 00:01:40.500 --> 00:01:45.900.00000000001
// Centex tree with a note going from notes going from no going from note that

// 20
// 00:01:45.900.00000000001 --> 00:01:51.300
// is what we doing module 1 in module two we take that tree and we

// 21
// 00:01:51.300 --> 00:01:55.300
// pass it to the code generator I want it's being passed to the code generator

// 22
// 00:01:55.300 --> 00:02:01.200
// the code generator will go through all of the nodes in the ab 1663 and

// 23
// 00:02:01.200 --> 00:02:06.99.999999999994
// it will create a Assembly Language to do what you've asked it okay if the

// 24
// 00:02:06.99.999999999994 --> 00:02:10.800.00000000001
// Assembly Language will do what the C program says to do I'll call Jenny what

// 25
// 00:02:10.800.00000000001 --> 00:02:16.500
// I put the Assembly Language and performs the same time as the source file input
